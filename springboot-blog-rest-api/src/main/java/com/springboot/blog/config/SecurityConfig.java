package com.springboot.blog.config;

import com.springboot.blog.security.JwtAuthenticatcationEntryPoint;
import com.springboot.blog.security.JwtAuthenticationFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import java.net.http.HttpRequest;

@Configuration
@EnableMethodSecurity //<- method lvl security
//^^^it internally has pre,post auth tags etc
public class SecurityConfig {

    /*
    basic auth filter will create a instance of username password and will pass it to authentication manager
    it will return an auth object which will eventually be saved in security context holder
     */

    private UserDetailsService userDetailsService;

    private JwtAuthenticatcationEntryPoint authenticatcationEntryPoint;

    private JwtAuthenticationFilter authenticationFilter;

    public SecurityConfig(UserDetailsService userDetailsService,
                          JwtAuthenticatcationEntryPoint authenticatcationEntryPoint,
                          JwtAuthenticationFilter authenticationFilter
    ) {
        this.userDetailsService = userDetailsService;
        this.authenticatcationEntryPoint=authenticatcationEntryPoint;
        this.authenticationFilter=authenticationFilter;
    }

    // Define password encoder
    @Bean
    public static PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    //getting authentication manager
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{

        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authorize ->
                        //authorise only get requests, post for login/register
                        authorize
                                .requestMatchers(HttpMethod.GET,"/api/**").permitAll()
                                .requestMatchers("/api/auth/**").permitAll()
                                .anyRequest().authenticated()
                )
                //.httpBasic(Customizer.withDefaults())
                .exceptionHandling(exception -> exception
                        .authenticationEntryPoint(authenticatcationEntryPoint))
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                );

        //this tells to add filter before
        http.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return  http.build();
    }
}

/*
         +--------------------+
         |  Incoming Request  |
         +--------------------+
                   |
                   v
     +-------------------------------+
     | SecurityFilterChain from Config|
     +-------------------------------+
                   |
       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
       ‚Üì              ‚Üì                ‚Üì
  Login Route     Public Route     Protected Route
 (/api/auth/**)   (e.g. GET /posts)  (e.g. /api/data)
       ‚Üì              ‚Üì                ‚Üì
Bypass JWT filter Permit All     ‚Üí JwtAuthenticationFilter
       ‚Üì                              ‚Üì
AuthManager.authenticate()       Valid Token? ‚Üí Yes ‚Üí Set SecurityContext
       ‚Üì                                        ‚Üì
DaoAuthProvider                             ‚Üí Controller
       ‚Üì
LoadUserByUsername()
       ‚Üì
PasswordEncoder.matches()
       ‚Üì
Return JWT token (JWTAuthResponse)

 */


/*
===========================================================================================
üîê SecurityConfig Class - Central Config for Spring Security (JWT Based)
===========================================================================================

üß† WHAT IS THIS CLASS FOR?
---------------------------
This configures:
‚úîÔ∏è How Spring Security handles requests
‚úîÔ∏è Which routes are public vs protected
‚úîÔ∏è How passwords are encoded
‚úîÔ∏è How Spring handles unauthorized access
‚úîÔ∏è Attaches custom JWT filter before Spring‚Äôs default filters

===========================================================================================
üî© CLASS-LEVEL ANNOTATIONS:
===========================================================================================

@Configuration
    ‚Üí Tells Spring this is a configuration class.

@EnableMethodSecurity
    ‚Üí Enables method-level security (@PreAuthorize, @PostAuthorize, etc.)

===========================================================================================
üß± CONSTRUCTOR INJECTION:
===========================================================================================

This brings in:
üîπ userDetailsService            ‚Üí used by DaoAuthenticationProvider to load user
üîπ authenticatcationEntryPoint  ‚Üí sends 401 if unauthorized
üîπ authenticationFilter         ‚Üí custom JWT filter that checks for valid token

===========================================================================================
üîë PASSWORD ENCODER BEAN:
===========================================================================================

@Bean
public static PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
}

Why?
üîê It hashes passwords when saving a user
üîÅ It compares password hashes during login using:
   ‚û§ passwordEncoder.matches(rawPassword, hashedPassword)

===========================================================================================
‚öôÔ∏è AUTHENTICATION MANAGER:
===========================================================================================

@Bean
public AuthenticationManager authenticationManager(AuthenticationConfiguration config)

Why?
üß† Needed to manually call authenticationManager.authenticate()
    ‚Üí You do this in AuthServiceImpl during login

===========================================================================================
üîê SECURITY FILTER CHAIN CONFIGURATION:
===========================================================================================

@Bean
SecurityFilterChain securityFilterChain(HttpSecurity http)

‚û°Ô∏è This is the MAIN method configuring Spring Security.
Let‚Äôs break down what's happening üëá

-----------------------------------------
1. CSRF Disabled (for stateless REST API)
-----------------------------------------
http.csrf(csrf -> csrf.disable());

-----------------------------------------
2. Public Routes
-----------------------------------------
http.authorizeHttpRequests(authorize ->
    authorize
        .requestMatchers(HttpMethod.GET, "/api/posts/**").permitAll()
        .requestMatchers("/api/auth/**").permitAll()
        .anyRequest().authenticated()
);

üß† Meaning:
- GET /api/posts/** ‚Üí Public (no auth required)
- /api/auth/** (login, signup) ‚Üí Public
- Everything else ‚Üí Needs JWT token

-----------------------------------------
3. Custom Exception Handler
-----------------------------------------
http.exceptionHandling(exception ->
    exception.authenticationEntryPoint(authenticatcationEntryPoint)
);

üõë If user hits a protected route without JWT ‚Üí 401 sent by `JwtAuthenticatcationEntryPoint`

-----------------------------------------
4. Session Management
-----------------------------------------
http.sessionManagement(session ->
    session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
);

üí° Why?
‚û°Ô∏è Because we use **JWT**, not server sessions

-----------------------------------------
5. Add JWT Filter Before Spring's Default
-----------------------------------------
http.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);

üî• This is CRITICAL:
- `JwtAuthenticationFilter` checks Authorization header
- Validates token, sets security context (like login)
- Placed BEFORE Spring's UsernamePasswordAuthenticationFilter (which is for form-based login)

-----------------------------------------
6. Build and Return Security Chain
-----------------------------------------
return http.build();

===========================================================================================
üìç When and Where to Use this Class?
===========================================================================================

‚úÖ ALWAYS needed in Spring Boot apps using:
- JWT Token Authentication
- Custom filters
- Stateless APIs
- Role-based or method-level auth (@PreAuthorize etc.)

üì¶ Automatically loaded by Spring Boot as part of Component Scan

===========================================================================================

*/